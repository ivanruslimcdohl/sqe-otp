// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/base.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/base.go -destination=./internal/mock/usecase/mock_usecase.go -package=mock_usecase
//
// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	usecase "github.com/ivanruslimcdohl/sqe-otp/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// OTPRequest mocks base method.
func (m *MockUsecase) OTPRequest(ctx context.Context, req usecase.OTPRequestReq) (usecase.OTPRequestRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OTPRequest", ctx, req)
	ret0, _ := ret[0].(usecase.OTPRequestRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OTPRequest indicates an expected call of OTPRequest.
func (mr *MockUsecaseMockRecorder) OTPRequest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OTPRequest", reflect.TypeOf((*MockUsecase)(nil).OTPRequest), ctx, req)
}

// OTPValidate mocks base method.
func (m *MockUsecase) OTPValidate(ctx context.Context, req usecase.OTPValidateReq) (usecase.OTPValidateRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OTPValidate", ctx, req)
	ret0, _ := ret[0].(usecase.OTPValidateRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OTPValidate indicates an expected call of OTPValidate.
func (mr *MockUsecaseMockRecorder) OTPValidate(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OTPValidate", reflect.TypeOf((*MockUsecase)(nil).OTPValidate), ctx, req)
}
