// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repo/db/interface.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repo/db/interface.go -destination=./internal/mock/dbrepo/mock_dbrepo.go -package=mock_dbrepo
//
// Package mock_dbrepo is a generated GoMock package.
package mock_dbrepo

import (
	context "context"
	reflect "reflect"

	model "github.com/ivanruslimcdohl/sqe-otp/internal/repo/db/mongo/model"
	gomock "go.uber.org/mock/gomock"
)

// MockOTP is a mock of OTP interface.
type MockOTP struct {
	ctrl     *gomock.Controller
	recorder *MockOTPMockRecorder
}

// MockOTPMockRecorder is the mock recorder for MockOTP.
type MockOTPMockRecorder struct {
	mock *MockOTP
}

// NewMockOTP creates a new mock instance.
func NewMockOTP(ctrl *gomock.Controller) *MockOTP {
	mock := &MockOTP{ctrl: ctrl}
	mock.recorder = &MockOTPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOTP) EXPECT() *MockOTPMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOTP) Get(ctx context.Context, otpCode string) (model.OTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, otpCode)
	ret0, _ := ret[0].(model.OTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOTPMockRecorder) Get(ctx, otpCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOTP)(nil).Get), ctx, otpCode)
}

// Insert mocks base method.
func (m_2 *MockOTP) Insert(ctx context.Context, m model.OTP) (string, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Insert", ctx, m)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockOTPMockRecorder) Insert(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOTP)(nil).Insert), ctx, m)
}

// Validate mocks base method.
func (m *MockOTP) Validate(ctx context.Context, otpCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, otpCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockOTPMockRecorder) Validate(ctx, otpCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockOTP)(nil).Validate), ctx, otpCode)
}
